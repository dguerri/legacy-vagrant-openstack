
---

# Packages

- name: Install keystone service and client
  apt: name="{{ item }}" state=present
  with_items:
    - keystone
    - python-keystoneclient

# Database

- name: Create keystone db
  mysql_db: name="{{ item }}"
            state=present
            login_host="{{ controller_hostname }}"
            login_user=root
            login_password="{{ mysql_root }}"
  with_items:
    - keystone
  notify:
    - Sync keystone db
    - Restart keystone

- name: Create keystone user
  mysql_user: name="{{ item.name }}"
              host="{{ item.host }}"
              password="{{ item.password }}"
              priv="{{ item.privs }}"
              state=present
              login_host="{{ controller_hostname }}"
              login_user=root
              login_password="{{ mysql_root }}"
              append_privs=yes
  with_items:
    - name:     keystone
      host:     localhost
      password: "{{ keystone_dbpass }}"
      privs:    keystone.*:ALL
    - name:     keystone
      host:     "{{ controller_hostname }}"
      password: "{{ keystone_dbpass }}"
      privs:    keystone.*:ALL
  notify:
    - Sync keystone db
    - Restart keystone

# Configuration file

- name: Configure keystone
  ini_file: dest=/etc/keystone/keystone.conf
            section="{{ item.section }}"
            option="{{ item.option }}"
            value="{{ item.value }}"
  with_items:
    - section:  DEFAULT
      option:   admin_token
      value:    "{{ admin_token }}"
    - section:  DEFAULT
      option:   log_dir
      value:    /var/log/keystone
    - section:  database
      option:   connection
      value:    "mysql://keystone:{{ keystone_dbpass }}@{{ controller_hostname }}/keystone"
  notify:
    - Restart keystone

# Security / Maintenance

- name: Make sure keystone is restarted
  meta: flush_handlers

- name: Wait keystone
  wait_for: host="{{ controller_hostname }}" port="{{ keystone_admin_port }}" delay=3

- name: Remove useless SQLite db file
  file: path=/var/lib/keystone/keystone.db state=absent

- name: Add cronjob that remove keystone expired token
  cron: name="remove keystone expired token"
        minute=0
        hour=*/1
        user=keystone
        job="/usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1"
        cron_file="remove-keystone-expired-tokens"

# Tenants, users and roles

- name: Create admin tenant
  keystone_user: tenant=admin
                 tenant_description="Admin Tenant"
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

- name: Create service tenant
  keystone_user: tenant=service
                 tenant_description="Service Tenant"
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

- name: Create demo tenant
  keystone_user: tenant=demo
                 tenant_description="Demo Tenant"
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

- name: Create keystone admin user in admin tenant
  keystone_user: user=admin
                 tenant=admin
                 password="{{ admin_pass }}"
                 email=admin@localhost
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

- name: Create keystone demo user in demo tenant
  keystone_user: user=demo
                 tenant=demo
                 password="{{ demo_pass }}"
                 email=demo@localhost
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

- name: Add admin role to user admin in tenant admin
  keystone_user: role=admin
                 user=admin
                 tenant=admin
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

- name: Add _member role to user demo in tenant demo
  keystone_user: role=_member_
                 user=demo
                 tenant=demo
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

# Endpoints

- name: "Dump service list"
  shell: keystone service-list
  register: service_list
  changed_when: false
  environment: openstack_service_env

- name: "Dump endpoint list"
  shell: keystone endpoint-list
  register: endpoint_list
  changed_when: false
  environment: openstack_service_env

- name: Create the service entity for the identity service
  shell: keystone service-create --name keystone --type identity --description="OpenStack Identity"
  environment: openstack_service_env
  when: "service_list.stdout.find('keystone') == -1"

- name: "Dump identity service id"
  shell: keystone service-list | awk '/ identity / {print $2}'
  register: identity_service_id
  changed_when: false
  environment: openstack_service_env

- name: Create the API endpoint for the Identity service
  shell: >
    keystone endpoint-create \
      --service-id={{ identity_service_id.stdout }} \
      --publicurl=http://{{ controller_hostname }}:{{ keystone_port }}/v2.0 \
      --internalurl=http://{{ controller_hostname }}:{{ keystone_port }}/v2.0 \
      --adminurl=http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0
  when: "endpoint_list.stdout.find('{{ identity_service_id.stdout }}') == -1"
  environment: openstack_service_env

