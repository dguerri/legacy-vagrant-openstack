---

# Packages

- name: Install glance service and client
  apt: name="{{ item }}" state=present
  with_items:
    - glance
    - python-glanceclient

# Database

- name: Create glance db
  mysql_db: name="{{ item }}"
            state=present
            login_host="{{ controller_hostname }}"
            login_user=root
            login_password="{{ mysql_root }}"
  with_items:
    - glance
  notify:
    - Sync glance db
    - Restart glance API
    - Restart glance registry


- name: Create glance user
  mysql_user: name="{{ item.name }}"
              host="{{ item.host }}"
              password="{{ item.password }}"
              priv="{{ item.privs }}"
              state=present
              login_host="{{ controller_hostname }}"
              login_user=root
              login_password="{{ mysql_root }}"
              append_privs=yes
  with_items:
    - name:     glance
      host:     localhost
      password: "{{ glance_dbpass }}"
      privs:    glance.*:ALL
    - name:     glance
      host:     "{{ controller_hostname }}"
      password: "{{ glance_dbpass }}"
      privs:    glance.*:ALL
  notify:
    - Sync glance db
    - Restart glance API
    - Restart glance registry

# Configuration files

- name: Configure glance API
  ini_file: dest=/etc/glance/glance-api.conf
            section="{{ item.section }}"
            option="{{ item.option }}"
            value="{{ item.value }}"
  with_items:
    - section:  database
      option:   connection
      value:    "mysql://glance:{{ glance_dbpass }}@{{ controller_hostname }}/glance"
    - section:  DEFAULT
      option:   rpc_backend
      value:    rabbit
    - section:  DEFAULT
      option:   rabbit_host
      value:    "{{ controller_hostname }}"
    - section:  DEFAULT
      option:   rabbit_userid
      value:    openstack
    - section:  DEFAULT
      option:   rabbit_password
      value:    "{{ rabbit_pass }}"
    - section:  keystone_authtoken
      option:   auth_uri
      value:    "http://{{ controller_hostname }}:{{ keystone_port }}/v2.0"
    - section:  keystone_authtoken
      option:   auth_host
      value:    "{{ controller_hostname }}"
    - section:  keystone_authtoken
      option:   auth_port
      value:    "{{ keystone_admin_port }}"
    - section:  keystone_authtoken
      option:   auth_protocol
      value:    http
    - section:  keystone_authtoken
      option:   admin_tenant_name
      value:    service
    - section:  keystone_authtoken
      option:   admin_user
      value:    glance
    - section:  keystone_authtoken
      option:   admin_password
      value:    "{{ glance_pass }}"
    - section:  paste_deploy
      option:   flavor
      value:    keystone
  notify:
    - Restart glance API

- name: Configure glance registry
  ini_file: dest=/etc/glance/glance-registry.conf
            section="{{ item.section }}"
            option="{{ item.option }}"
            value="{{ item.value }}"
  with_items:
    - section:  database
      option:   connection
      value:    "mysql://glance:{{ glance_dbpass }}@{{ controller_hostname }}/glance"
    - section:  keystone_authtoken
      option:   auth_uri
      value:    "http://{{ controller_hostname }}:{{ keystone_port }}/v2.0"
    - section:  keystone_authtoken
      option:   auth_host
      value:    "{{ controller_hostname }}"
    - section:  keystone_authtoken
      option:   auth_port
      value:    "{{ keystone_admin_port }}"
    - section:  keystone_authtoken
      option:   auth_protocol
      value:    http
    - section:  keystone_authtoken
      option:   admin_tenant_name
      value:    service
    - section:  keystone_authtoken
      option:   admin_user
      value:    glance
    - section:  keystone_authtoken
      option:   admin_password
      value:    "{{ glance_pass }}"
    - section:  paste_deploy
      option:   flavor
      value:    keystone
  notify:
    - Restart glance registry

# Security / Maintenance

- name: Make sure glance is restarted
  meta: flush_handlers

- name: Wait glance
  wait_for: host="{{ controller_hostname }}" port="{{ glance_port }}" delay=3

- name: Remove useless SQLite db file
  file: path=/var/lib/glance/glance.sqlite state=absent

# Users and roles

- name: Create keystone glance user in service tenant
  keystone_user: user=glance
                 tenant=service
                 password="{{ glance_pass }}"
                 email=glance@localhost
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

- name: Add admin role to glance user in service tenant
  keystone_user: role=admin
                 user=glance
                 tenant=service
                 endpoint="http://{{ controller_hostname }}:{{ keystone_admin_port }}/v2.0"
                 token="{{ admin_token }}"

# Endpoints

- name: "Dump service list"
  shell: keystone service-list
  register: service_list
  changed_when: false
  environment: openstack_service_env

- name: "Dump endpoint list"
  shell: keystone endpoint-list
  register: endpoint_list
  changed_when: false
  environment: openstack_service_env

- name: Create the service entity for the image service
  shell: keystone service-create --name glance --type image --description="OpenStack Image Service"
  environment: openstack_service_env
  when: "service_list.stdout.find('glance') == -1"

- name: "Dump image service id"
  shell: keystone service-list | awk '/ image / {print $2}'
  register: image_service_id
  changed_when: false
  environment: openstack_service_env

- name: Create the API endpoint for the image service
  shell: >
    keystone endpoint-create \
      --service-id={{ image_service_id.stdout }} \
      --publicurl=http://{{ controller_hostname }}:{{ glance_port }} \
      --internalurl=http://{{ controller_hostname }}:{{ glance_port }} \
      --adminurl=http://{{ controller_hostname }}:{{ glance_port }}
  when: "endpoint_list.stdout.find('{{ image_service_id.stdout }}') == -1"
  environment: openstack_service_env
